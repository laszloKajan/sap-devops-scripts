#!/bin/sh -e
# TMService API: https://api.sap.com/api/TMS_v2/resource
#            1               2                            3                  4                5
# tmp-upload "${serviceKey}" "${workspace:-mta_archives}" "${nodeName:-DCP}" "${doImport:-1}" "${doForward:-1}"
#
verbose=1

serviceKey="${1:?}";
workspace="${2:-mta_archives}";
nodeName=$(echo "${3:-DCP}" | tr -d '/');
doImport="${4:-1}";
doForward="${5:-1}";

INSECURE=--insecure
mtaPath="*.mtar"
#namedUser=""
description=${bamboo_planRepository_1_revision};
if ! [ "$description" ]; then description=$(git rev-parse HEAD); fi;
[ "$description" ];
if [ "$verbose" ]; then echo "Description: '${description}'" >&2; fi;

# Development_Tools
clientId=$(echo "$serviceKey" | jq -er '.uaa.clientid'); [ "$clientId" ];
clientSecret=$(echo "$serviceKey" | jq -er '.uaa.clientsecret'); [ "$clientSecret" ];
uaaUrl=$(echo "$serviceKey" | jq -er '.uaa.url'); [ "$uaaUrl" ];
uri=$(echo "$serviceKey" | jq -er '.uri'); [ "$uri" ];

if [ "$verbose" ]; then
    echo "[TransportManagementService] UAA URL: '${uaaUrl}'" >&2;
    echo "[TransportManagementService] TMS URL: '${uri}'" >&2;
    echo "[TransportManagementService] ClientId: '${clientId}'" >&2;
fi;

# def token = tms.authentication(uaaUrl, clientId, clientSecret)
authentication () {
    local oauthClientId="${1}";
    local oauthClientSecret="${2}";

    echo "OAuth Token retrieval started." >&2;
    if [ "$verbose" ]; then echo "UAA-URL: '${uaaUrl}', ClientId: '${oauthClientId}'" >&2; fi;

    local encodedUsernameColonPassword=$(echo -n "${oauthClientId}:${oauthClientSecret}" | base64 -w 0 -);

    #    ${verbose:+--verbose} \
    local response;
    response=$(curl \
        $INSECURE \
        --silent --show-error \
        -H "authorization: Basic ${encodedUsernameColonPassword}" \
        -H "Accept: application/json" \
        --data-urlencode "grant_type=password" \
        --data-urlencode "username=${oauthClientId}" \
        --data-urlencode "password=${oauthClientSecret}" \
        "${uaaUrl}/oauth/token/?grant_type=client_credentials&response_type=token");

    echo "$response" | jq -er '.access_token'
};

getServiceVersion () {
    local url="${1}";
    local token; token="${2}";

    echo "Service version retrieval started." >&2;

    curl \
        $INSECURE \
        --verbose \
        -H "Authorization: Bearer ${token}" \
        "${url}/versions";

};

getNodes () {
    local url="${1}";
    local token; token="${2}";

    echo "Node retrieval started." >&2;

        #--verbose \
    curl \
        $INSECURE \
        -H "Authorization: Bearer ${token}" \
        "${url}/v2/nodes";
};

getTransportRequests () {
    local url="${1}";
    local token; token="${2}";
    local nodeId="${3}";

    echo "Transport request retrieval started." >&2;

        #--verbose \
    curl \
        $INSECURE \
        -H "Authorization: Bearer ${token}" \
        "${url}/v2/nodes/${nodeId}/transportRequests?status=fa";
};

uploadFile () {
    local url="${1}";
    local token; token="${2}";
    local file="${3}";
    local namedUser="${4}";
    
    echo "File upload started." >&2;
    if [ "$verbose" ]; then echo "URL: '${url}', File: '${file}', namedUser: '${namedUser}'" >&2; fi;

        #--verbose \
    curl \
        $INSECURE \
        --silent --show-error \
        -H "Authorization: Bearer ${token}" \
        ${namedUser:+"-F \"namedUser=${namedUser}\""} \
        -F "file=@${file}" \
        "${url}/v2/files/upload";
};

exportUploadFileToNode () {
    local url="${1}";
    local token; token="${2}";
    local nodeName="${3}";
    local fileId="${4}";
    local description="${5}";
    local namedUser="${6}";
    local exportUpload="${7:-upload}"; # [export|upload]

    echo "Node upload started." >&2;
    if [ "$verbose" ]; then echo "URL: '${url}', NodeName: '${nodeName}', FileId: '${fileId}', Action: '${exportUpload}'" >&2; fi;

    local jsonToSend;
    jsonToSend="{\"nodeName\": \"${nodeName}\", \"contentType\": \"MTA\", "\
"\"description\": \"${description}\", "\
"\"storageType\": \"FILE\", ${namedUser:+\"namedUser\": \"${namedUser}\",} "\
"\"entries\": [{\"uri\": \"${fileId}\"}]}";

    curl \
        $INSECURE \
        --silent --show-error \
        -H "Content-Type: application/json" \
        -H "authorization: Bearer ${token}" \
        -H "Accept: application/json" \
        --data-binary "${jsonToSend}" \
        "${url}/v2/nodes/${exportUpload}";
};

importTransportRequests () {
    local url="${1}";
    local token; token="${2}";
    local nodeId="${3}";
    local reqId="${4}";

    echo "Import started." >&2;
    if [ "$verbose" ]; then echo "URL: '${url}', NodeId: '${nodeId}', ReqId: '${reqId}'" >&2; fi;

    local jsonToSend;
    jsonToSend="{\"transportRequests\": [$reqId]}";

    curl \
        $INSECURE \
        --silent --show-error \
        -H "Content-Type: application/json" \
        -H "authorization: Bearer ${token}" \
        -H "Accept: application/json" \
        --data-binary "${jsonToSend}" \
        "${url}/v2/nodes/$nodeId/transportRequests/import";
};

getActions () {
    local url="${1}";
    local token; token="${2}";
    local actionId="${3}";

    [ "$actionId" ];

    echo "getActions started." >&2;
    if [ "$verbose" ]; then echo "URL: '${url}', ActionId: '${actionId}'" >&2; fi;

    curl \
        $INSECURE \
        --silent --show-error \
        -H "Authorization: Bearer ${token}" \
        "${url}/v2/actions/${actionId}";
};

forwardTransportRequests () {
    local url="${1}";
    local token; token="${2}";
    local nodeId="${3}";
    local reqId="${4}";

    echo "Forward started." >&2;
    if [ "$verbose" ]; then echo "URL: '${url}', NodeId: '${nodeId}', ReqId: '${reqId}'" >&2; fi;

    local jsonToSend;
    jsonToSend="{\"transportRequests\": [$reqId]}";

    curl \
        $INSECURE \
        --silent --show-error \
        --write-out '\n{"http_code": "%{http_code}"}' \
        -H "Content-Type: application/json" \
        -H "authorization: Bearer ${token}" \
        -H "Accept: application/json" \
        --data-binary "${jsonToSend}" \
        "${url}/v2/nodes/$nodeId/transportRequests/forward";
};


# Action -----------------------------------------------------------------------

token=$(authentication "$clientId" "$clientSecret");

## {Testing
##set -x;
##getServiceVersion "$uri" "$token";
#tmsNodes=$(getNodes "$uri" "$token");
#nodeId=$(echo "$tmsNodes" | jq -er ".nodes[] | select(.name == \"${nodeName}\").id");
#echo "nodeId=${nodeId}" >&2;
#getTransportRequests "$uri" "$token" "$nodeId" 2>/dev/null;
#exit 0;
## Testing}

workspaceMtaPath=`echo ${workspace}/${mtaPath}`; # * expansion
fileUploadResponse=$(uploadFile "$uri" "$token" "${workspaceMtaPath}" "$namedUser");

fileId=$(echo "${fileUploadResponse}" | jq -er '.fileId');
[ "$fileId" ];

uploadFileToNodeResponse=$(exportUploadFileToNode "$uri" "$token" "$nodeName" "$fileId" "$description" "$namedUser" "upload");

echo "fileUploadResponse=${fileUploadResponse}" >&2;
echo "uploadFileToNodeResponse=${uploadFileToNodeResponse}" >&2;

# kajanl: Check the response, and exit with success only if it indicates success, see:
#   https://api.sap.com/api/TMS_v2/resource
transportRequestId=$(echo "${uploadFileToNodeResponse}" | jq -er '.transportRequestId');
[ "$transportRequestId" ];
nodeId=$(echo "${uploadFileToNodeResponse}" | jq -er ".queueEntries[] | select(.nodeName == \"${nodeName}\").nodeId");
[ "$nodeId" ];

# Import to $nodeName
if [ "$doImport" = "1" ]; then
    importResponse=$(importTransportRequests "$uri" "$token" "$nodeId" "$transportRequestId" import);
    # E.g. importResponse={"actionId":3838,"monitoringURL":"/v2/actions/3838"}
    echo "importResponse=${importResponse}" >&2;

    actionId=$(echo "$importResponse" | jq -er '.actionId');
    [ "$actionId" ];

    # Wait for import run to end
    repeat=1
    while [ $repeat = 1 ]; do
        sleep 23;
        actionsResponse=$(getActions "$uri" "$token" "$actionId");
        echo "actionsResponse=${actionsResponse}" >&2;

        actionStatus=$(echo "$actionsResponse" | jq -er ".status");
        if [ "$actionStatus" != "running" ]; then break; fi;
    done;
    [ "$actionStatus" = "succeeded" ];
fi;

# Forward from $nodeName
if [ "$doForward" = "1" ]; then
    forwardResponse=$(forwardTransportRequests "$uri" "$token" "$nodeId" "$transportRequestId" forward);
    # 204 on success, no body
    echo "forwardResponse=${forwardResponse}" >&2;

    forwardHttpCode=$(echo "$forwardResponse" | sed -n '$p' | jq -er '.http_code');
    [ "$forwardHttpCode" = "204" ];
fi;

# vim:et:
